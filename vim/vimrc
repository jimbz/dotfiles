set nocompatible

" Vundle
    filetype off " required!

    set rtp+=~/.vim/bundle/vundle/
    call vundle#rc()

    " let Vundle manage Vundle
    " required! 
    Bundle 'gmarik/vundle'

    " My Bundles here:
    " General
    Bundle 'a.vim'
    Bundle 'godlygeek/tabular'
    Bundle 'tpope/vim-surround'
    Bundle 'tpope/vim-repeat'
    Bundle 'mbbill/undotree'
    " Utils
    Bundle 'SudoEdit.vim'
    Bundle 'file-line'
    Bundle 'tpope/vim-dispatch.git'
    Bundle 'kien/ctrlp.vim'
    " Display
    Bundle 'bling/vim-bufferline'
    " Programming
    Bundle 'majutsushi/tagbar'
    Bundle 'Valloric/YouCompleteMe'
    Bundle 'SirVer/ultisnips'
    Bundle 'scrooloose/syntastic'
    Bundle 'mhinz/vim-signify'
    " Colorschemes
    Bundle 'Solarized'
    Bundle 'Zenburn'
    Bundle 'chriskempson/base16-vim'
" Vundle end
filetype plugin indent on

" Solarized scheme on terminal needs only the 16-color palette
set t_Co=16

" Change leader from '\' to ,
"let mapleader = ","

" swap and backup files
set directory=~/.backup//

" Persistent undo
set undofile                " Save undo's after file closes
set undodir=~/.vim/undo     " where to save undo histories
nmap =u :UndotreeToggle<CR>

" Columns
set colorcolumn=80

" Color scheme and syntax highlighting
set background=dark
colorscheme solarized
syntax on

" Status line
set laststatus=2
set ruler

" Tabs and indent (python style)
set shiftwidth=4
set tabstop=4
set expandtab
set autoindent

" Add system-wide tags
"set tags+=~/.vim/tags/c-local
" Add local include files to path
set path+=/usr/local/include
" Recursively set the path of the project.
set path+=$PWD/**

" Various options
set showcmd           " Show (partial) command in status line.
set showmatch         " Show matching brackets.
set ignorecase        " Do case insensitive matching
set smartcase         " Do smart case matching
set incsearch         " Incremental search
set autowrite         " Automatically save before commands like :next and :make
set autoread          " Automatically update file if changed on disk
set hidden            " Hide buffers when they are abandoned
set mouse=a           " Enable mouse usage (all modes)
set cursorline        " Highlight current line
set history=100       " Remember 100 lines of commands history
set virtualedit=block " Virtual edit in block visual mode
set diffopt+=vertical " Vertical diff

" Per-directory vimrc
set exrc
set secure

" Remove the icon bar from the GUI
set guioptions-=T
set guioptions-=m

" Wildcard completion menu
set wildmenu
set wildmode=longest,full

" Folding
set foldminlines=5 " Min number of lines for folding
"set foldopen=all
set foldnestmax=5

"TagBar
noremap =<CR> :TagbarToggle<CR>
let g:tagbar_left=1
" -- handle CUDA as C++
let g:tagbar_type_cpp = {
    \ 'ctagstype' : 'c++',
    \ 'kinds'     : [
        \ 'd:macros:1:0',
        \ 'p:prototypes:1:0',
        \ 'g:enums',
        \ 'e:enumerators:0:0',
        \ 't:typedefs:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:variables:0:0'
    \ ],
    \ 'sro'        : '::',
    \ 'kind2scope' : {
        \ 'g' : 'enum',
        \ 'n' : 'namespace',
        \ 'c' : 'class',
        \ 's' : 'struct',
        \ 'u' : 'union'
    \ },
    \ 'scope2kind' : {
        \ 'enum'      : 'g',
        \ 'namespace' : 'n',
        \ 'class'     : 'c',
        \ 'struct'    : 's',
        \ 'union'     : 'u'
    \ }
\ }

" Auto close preview window
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Wrap by word
set wrap
set linebreak
set display=lastline

" Move through wrapped lines
inoremap <silent> <Down> <C-o>gj
inoremap <silent> <Up> <C-o>gk
noremap <silent> <Down> gj
noremap <silent> <Up> gk
noremap <silent> <M-j> gj
noremap <silent> <M-k> gk
noremap <silent> <M-h> h
noremap <silent> <M-l> l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("gui_running")
    let g:ctrlp_prompt_mappings = {
                \ 'ToggleType(1)':        ['<c-Space>', '<c-f>', '<c-up>'],
                \ }
else
    let g:ctrlp_prompt_mappings = {
                \ 'ToggleType(1)':        ['<Nul>', '<c-f>', '<c-up>'],
                \ }
endif
let g:ctrlp_extensions = ['mixed', 'buffertag', 'tag', 'line']
let g:ctrlp_cmd = 'CtrlPMixed'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" YCM/Ultisnips compatibility
let g:UltiSnipsExpandTrigger='<c-j>'
let g:ycm_seed_identifiers_with_syntax = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Macros
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" "Underline" with = signs
noremap y= yyp:s/./=/g<enter>
" Rebuild ctags database
noremap =t :!ctags -R --langmap=c:+.cu --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>
" Decrease the number under cursor (C-A is reserved by screen)
nnoremap <C-e> <C-a>
" Search errors in quickfix window
noremap gb :copen<CR>/error:<CR>
" Switch buffers (for Putty sessions where std shortcut doesn't work)
nnoremap <C-b> :b#<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LATEX
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a single file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" VimLatex
" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" Manual
au filetype tex setlocal makeprg=rubber\ --pdf\ --inplace\ -f\ %;\ rubber-info\ --check\ %
au filetype tex map <LocalLeader>v :!xdg-open %<.pdf<CR><CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" C / C++ / CUDA
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntax based folding
autocmd FileType c,cpp,cuda setlocal foldmethod=syntax
autocmd FileType c,cpp,cuda setlocal foldcolumn=0
" .cuh as CUDA files
au BufEnter,BufNew *.cuh setlocal filetype=cuda
" GCC Compiler
compiler! gcc
" A.vim configuration
let g:alternateNoDefaultAlternate = 1
let g:alternateExtensions_cu = "h,cuh"
let g:alternateExtensions_h = "cu,c,cpp,cxx,cc,CC,cuh"
let g:alternateExtensions_cuh = "cu,c,cpp,cxx,cc,CC,h"
" CUDA TagList support
let tlist_cuda_settings= 'c++;n:namespace;v:variable;d:macro;t:typedef;' .
                             \ 'c:class;g:enum;s:struct;u:union;f:function'
